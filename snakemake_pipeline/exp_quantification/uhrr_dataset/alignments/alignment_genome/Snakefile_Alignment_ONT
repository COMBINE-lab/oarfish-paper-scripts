#libraries
from os.path import join

if not workflow.overwrite_configfiles:
	configfile: "config.yml"


ref_dir = config["reference_dir"]
data_dir = config["data_dir"]
align_dir = config["align_dir"]

GENOME_FILE = join(ref_dir, config["genome_file"])
GTF_FILE = join(ref_dir, config["gtf_file"])


#obtain annotation bed file
rule annotation_bed_file:
	output: 
		bed_file = join(ref_dir, 'hg38_sequins_SIRV_ERCCs_longSIRVs_corrected_IsoQuant.bed'),

	input:
		annotation = GTF_FILE,

	threads: config["num_threads"]

	shell:
		"""
		paftools.js gff2bed {input.annotation} > {output.bed_file}
		"""

rule index_file_genome:
    output: 
        genome_index = join(align_dir, 'hg38_sequins_SIRV_ERCCs_longSIRVs.genome_{dtype}.mmi'),
        time_index = join(align_dir, '{dtype}_idx_time_G'),
    input:
        genome = GENOME_FILE,

    threads: config["num_threads"]
    params:
        ax_type = lambda wildcards: 'splice' if wildcards.dtype == "ONT" else 'splice:hq',

    shell:
        """
        /usr/bin/time -o {output.time_index} -v minimap2 -t {threads} -x {params.ax_type} -d {output.genome_index} {input.genome}
        """


#Map long reads against transcripts using minimap2
rule map_genome:
	output: 
		bam_out = join(align_dir, '{dtype}/{sample}_G.bam'),
		time_out = join(align_dir, '{dtype}/{sample}_time_G'),

	input:
		genome = GENOME_FILE,
		bed_file = join(ref_dir, 'hg38_sequins_SIRV_ERCCs_longSIRVs_corrected_IsoQuant.bed'),
		genome_index = join(align_dir, 'hg38_sequins_SIRV_ERCCs_longSIRVs.genome_{dtype}.mmi'),
		long_samples = join(data_dir, "{dtype}/{sample}/flnc_all_shuffled.fastq.gz"),

	params:
		ax_type = lambda wildcards: 'splice' if wildcards.dtype == "ONT" else 'splice:hq',

	threads: config["num_threads"]

	shell:
		"""
		/usr/bin/time -o {output.time_out} -v minimap2 --junc-bed {input.bed_file} -t {threads} -ax {params.ax_type} -uf --secondary=no {input.genome} {input.long_samples}\
		| samtools view -@{threads} -h -F 2052 -bS > {output.bam_out}
		"""

rule all_geneome:
	input:
		mapped_long_reads = expand( join(align_dir, '{dtype}/{sample}_G.bam'), zip, dtype=["ONT", "PacBio_kinnex", "PacBio_kinnex"], sample=["drna", "SQ2", "Revio"]),
